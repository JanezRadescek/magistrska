operation call : int * int * int
operation result : int * int

let nil = []

let callWith =
	fun callCounter fBoxed x ->
		let callNo = !callCounter in
		send call (callNo, fBoxed, x);
		callCounter := callNo + 1;
		promise (result (callNo', y) r ->
			if callNo = callNo' then
				return <<y>>
			else
				r ()
		) as p in
		let valueThunk () = awaitValue p in
		return valueThunk

let remote fList =
	promise (call (callNo, fNo, x) r ->
		let f = nth fList fNo in
		let y = f x in
		send result (callNo, y);
		r ()
	) as _ in
	()

run	let callCounter = ref 0 in
	let y1 = callWith callCounter 0 2 in
	let y2 = callWith callCounter 1 3 in
	let z = 42 + 7 in
	return y1 () + y2 () + z

run remote ((fun x -> 2 * x)::(fun x -> 7 * x)::nil)